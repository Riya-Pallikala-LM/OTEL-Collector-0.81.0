name: auto-instrumentation

on:
  push:
    branches:
      - main
      - env-var-instrumentation
  pull_request:
    paths:
      - '.github/workflows/auto-instrumentation.yml'
      - '**go.mod'
      - '**go.sum'
      - '**.go'
      - 'instrumentation/**'
      - 'internal/buildscripts/packaging/tests/**'
      - '!**.md'
      - '!**_test.go'
      - '!examples/**'
      - '!internal/buildscripts/packaging/tests/deployments/**'
      - '!tests/**'

concurrency:
  group: auto-instrumentation-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.10'
  PIP_VERSION: '22.0.4'
  REQUIREMENTS_PATH: "internal/buildscripts/packaging/tests/requirements.txt"
  GO_VERSION: 1.20.5

jobs:
  setup-environment:
    # Use 20.04.5 until https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/16450 is resolved
    runs-on: ubuntu-20.04
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: '**/go.sum'

      - name: Installing dependency
        run: |
          make install-tools

  cross-compile:
    # Use 20.04.5 until https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/16450 is resolved
    runs-on: ubuntu-20.04
    needs: [setup-environment]
    strategy:
      matrix:
        SYS_BINARIES: [ "binaries-linux_amd64", "binaries-linux_arm64" ]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: '**/go.sum'

      - name: Build Collector
        run: |
          make ${{ matrix.SYS_BINARIES }}

      - name: Uploading binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.SYS_BINARIES }}
          path: |
            ./bin/*

  libsplunk:
    # Use 20.04.5 until https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/16450 is resolved
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        ARCH: [ "amd64", "arm64" ]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Set up QEMU
        if: ${{ matrix.ARCH == 'arm64' }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
          image: tonistiigi/binfmt:qemu-v7.0.0

      - name: Build libsplunk.so
        run: make -C instrumentation/splunk-otel-auto-instrumentation dist ARCH=${{ matrix.ARCH }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: libsplunk-${{ matrix.ARCH }}
          path: ./instrumentation/splunk-otel-auto-instrumentation/dist/libsplunk_${{ matrix.ARCH }}.so

  instrumentation-package:
    runs-on: ubuntu-20.04
    needs: [libsplunk]
    strategy:
      matrix:
        PACKAGE: [ "splunk-otel-auto-instrumentation", "splunk-otel-envvar-auto-instrumentation" ]
        SYS_PACKAGE: [ "deb", "rpm" ]
        ARCH: [ "amd64", "arm64"]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Downloading libsplunk-${{ matrix.ARCH }}
        if: ${{ matrix.PACKAGE == 'splunk-otel-auto-instrumentation' }}
        uses: actions/download-artifact@v3
        with:
          name: libsplunk-${{ matrix.ARCH }}
          path: ./instrumentation/splunk-otel-auto-instrumentation/dist

      - name: Build ${{ matrix.PACKAGE }} ${{ matrix.SYS_PACKAGE }} ${{ matrix.ARCH }} package
        run: |
          make -C instrumentation/${{ matrix.PACKAGE }} ${{ matrix.SYS_PACKAGE }}-package ARCH="${{ matrix.ARCH }}" SKIP_COMPILE=true

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.PACKAGE }}-${{ matrix.ARCH }}-${{ matrix.SYS_PACKAGE }}
          path: ./instrumentation/${{ matrix.PACKAGE }}/dist/${{ matrix.PACKAGE }}*.${{ matrix.SYS_PACKAGE }}

  test-instrumentation-matrix:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Get matrix
        id: get-matrix
        run: |
          # create test matrix for distro and arch
          dockerfiles=$(find internal/buildscripts/packaging/tests/instrumentation/images/ -name "Dockerfile.*" | cut -d '.' -f2- | sort -u)
          if [ -z "$dockerfiles" ]; then
            echo "Failed to get dockerfiles from internal/buildscripts/packaging/tests/instrumentation/images!" >&2
            exit 1
          fi
          distro=$(for d in $dockerfiles; do echo -n "\"$d\","; done)
          arch="\"amd64\", \"arm64\""
          matrix="{\"DISTRO\": [${distro%,}], \"ARCH\": [${arch}]}"
          echo "$matrix" | jq
          echo "matrix=${matrix}" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}

  test-instrumentation-package:
    # Use 20.04.5 until https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/16450 is resolved
    runs-on: ${{ fromJSON('["ubuntu-20.04", "ubuntu-22.04"]')[matrix.DISTRO == 'amazonlinux-2023'] }}
    timeout-minutes: 60
    needs: [cross-compile, instrumentation-package, test-instrumentation-matrix]
    strategy:
      matrix: ${{ fromJSON(needs.test-instrumentation-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Get package type for ${{ matrix.DISTRO }}
        run: |
          for pkg in "deb" "rpm"; do
            if [[ -f "internal/buildscripts/packaging/tests/instrumentation/images/${pkg}/Dockerfile.${{ matrix.DISTRO }}" ]]; then
              echo "SYS_PACKAGE=${pkg}" >> $GITHUB_ENV
              exit 0
            fi
          done
          echo "Unknown distro '${{ matrix.DISTRO }}'!"
          exit 1

      - uses: actions/download-artifact@v3
        with:
          name: binaries-linux_${{ matrix.ARCH }}
          path: ./bin

      - uses: actions/download-artifact@v3
        with:
          name: splunk-otel-auto-instrumentation-${{ matrix.ARCH }}-${{ env.SYS_PACKAGE }}
          path: ./instrumentation/splunk-otel-auto-instrumentation/dist

      - uses: actions/download-artifact@v3
        with:
          name: splunk-otel-envvar-auto-instrumentation-${{ matrix.ARCH }}-${{ env.SYS_PACKAGE }}
          path: ./instrumentation/splunk-otel-envvar-auto-instrumentation/dist

      - uses: docker/setup-qemu-action@v2
        if: ${{ matrix.ARCH != 'amd64' }}
        with:
          platforms: ${{ matrix.ARCH }}
          image: tonistiigi/binfmt:qemu-v7.0.0

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ env.REQUIREMENTS_PATH }}

      - name: Install pytest
        run: |
          if which pip; then
              pip install --upgrade 'pip==${{ env.PIP_VERSION }}'
          else
              curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
              python get-pip.py 'pip==${{ env.PIP_VERSION }}'
          fi
          pip install -r "${{ env.REQUIREMENTS_PATH }}"

      - name: Test ${{ env.SYS_PACKAGE }} on ${{ matrix.DISTRO }} ${{ matrix.ARCH }}
        run: |
          distro="${{ matrix.DISTRO }}"
          if [[ "$distro" = "amazonlinux-2" ]]; then
            # workaround for pytest substring matching
            distro="amazonlinux-2 and not amazonlinux-2023"
          fi
          python3 -u -m pytest -sx --verbose -k "$distro and ${{ matrix.ARCH }}" \
            internal/buildscripts/packaging/tests/instrumentation/instrumentation_test.py
